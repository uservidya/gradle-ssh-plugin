apply plugin: 'ssh'

ssh {
    config(StrictHostKeyChecking: 'no')
}

remotes {
    localhost {
        role 'testServers'
        host = 'localhost'
        user = System.properties['user.name']
        identity = file("${System.properties['user.home']}/.ssh/id_rsa")
    }
}


feature('executing a command') {
    given {
        when.ext.x = (Math.random() * 100) as int
        when.ext.y = (Math.random() * 100) as int
        when.ext.tempFile = file("${buildDir}/${UUID.randomUUID()}")
        assert !when.ext.tempFile.exists()
    }
    when('executeCommand')
    then {
        assert when.ext.tempFile.exists()
        assert when.ext.tempFile.text as int == (when.ext.x + when.ext.y)
        assert when.ext.tempFile.delete()
    }
}

task executeCommand(type: SshTask) {
    session(remotes.localhost) {
        execute "expr $x + $y > '${tempFile.path}'"
    }
}


feature('filter hosts by role') {
    given {
        when.ext.x = (Math.random() * 100) as int
        when.ext.y = (Math.random() * 100) as int
        when.ext.tempFile = file("${buildDir}/${UUID.randomUUID()}")
        assert !when.ext.tempFile.exists()
    }
    when('executeCommandByRole')
    then {
        assert when.ext.tempFile.exists()
        assert when.ext.tempFile.text as int == (when.ext.x + when.ext.y)
        assert when.ext.tempFile.delete()
    }
}

task executeCommandByRole(type: SshTask) {
    session(remotes.role('testServers')) {
        execute "expr $x + $y > '${tempFile.path}'"
    }
}


feature('obtaining a value from the remote command') {
    given {
        when.ext.x = (Math.random() * 100) as int
        when.ext.y = (Math.random() * 100) as int
    }
    when('obtainValue')
    then {
        assert (when.ext.z as int) == (when.ext.x + when.ext.y)
    }
}

task obtainValue(type: SshTask) {
    session(remotes.localhost) {
        ext.z = execute("expr $x + $y")
    }
}
